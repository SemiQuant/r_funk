% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perform_mSig_analysis.R
\name{perform_mSig_analysis}
\alias{perform_mSig_analysis}
\title{Perform MSigDB Gene Set Enrichment Analysis}
\usage{
perform_mSig_analysis(
  results_df,
  title,
  p_cutoff = 0.05,
  genome = "mmu",
  category = "H",
  min_size = 15,
  max_size = 500,
  eps = 0,
  nPermSimple = 1000,
  ranking_method = "auto",
  handle_ties = TRUE,
  n_cores = 1,
  chunk_size = 100,
  memory_efficient = FALSE
)
}
\arguments{
\item{results_df}{A data frame containing differential expression results with
required columns: gene_symbol (or gene_id) and stat}

\item{title}{Character string for plot titles and file names}

\item{p_cutoff}{Numeric value for adjusted p-value cutoff (default: 0.05)}

\item{genome}{Character string specifying genome: "mmu" (mouse) or "hsa" (human)
(default: "mmu")}

\item{category}{Character string specifying MSigDB category (default: "H" for Hallmark)}

\item{min_size}{Minimum size of gene sets to analyze (default: 15)}

\item{max_size}{Maximum size of gene sets to analyze (default: 500)}

\item{eps}{Double value, boundary for calculating the p-value (default: 0)}

\item{nPermSimple}{Number of permutations for the simple algorithm (default: 1000)}

\item{ranking_method}{Character string specifying the ranking method to use:
"auto" (automatically choose based on available data),
"stat" (use raw test statistic),
"logfc" (use log fold change),
"logfc_pval" (combine log fold change with p-value significance),
"combined" (combine p-value and effect size),
"expression" (incorporate expression level) (default: "auto")}

\item{handle_ties}{Logical indicating whether to automatically handle ties
by using more sophisticated ranking metrics (default: TRUE)}

\item{n_cores}{Number of CPU cores to use for parallel processing (default: 1)}

\item{chunk_size}{Number of pathways to process in each chunk (default: 100)}

\item{memory_efficient}{Logical indicating whether to use memory-efficient mode (default: FALSE)}
}
\value{
A list containing:
\itemize{
\item results: A data frame containing GSEA results with columns:
\itemize{
\item pathway: Name of the gene set
\item pval: Nominal p-value
\item padj: Adjusted p-value (BH method)
\item ES: Enrichment score
\item NES: Normalized enrichment score
\item nMoreExtreme: Number of permutations with more extreme score
\item size: Size of the gene set
\item leadingEdge: Leading edge genes
}
\item plot: GSEA table visualization for significant pathways
\item status: Character string indicating analysis status
}
}
\description{
This function performs Gene Set Enrichment Analysis (GSEA) using MSigDB gene sets
and creates visualization plots. Uses the multilevel GSEA algorithm for more accurate
p-values and better computational efficiency. Supports parallel processing and
memory-efficient operation for large datasets.
}
\details{
The function performs the following steps:
\itemize{
\item Validates input data and parameters
\item Creates a ranked gene list based on the test statistic
\item Retrieves MSigDB gene sets for the specified genome and category
\item Performs multilevel GSEA analysis with optional parallel processing
\item Creates visualization for significant pathways
}

The multilevel GSEA algorithm provides more accurate p-values than standard GSEA,
especially for pathways with strong enrichment scores. It automatically determines
the optimal number of permutations needed for each pathway.

For large datasets or systems with limited memory, the memory_efficient mode can be used
to process pathways in chunks. This mode can be combined with parallel processing for
optimal performance. The chunk_size parameter controls the trade-off between memory
usage and processing overhead.

Parallel processing is supported through BiocParallel and can significantly speed up
the analysis when multiple cores are available. The optimal number of cores depends
on your system's capabilities and available memory.
}
\examples{
# Basic usage
results_df <- data.frame(
  gene_id = c("Trp53", "Brca1", "Myc"),
  padj = c(0.01, 0.03, 0.02),
  stat = c(1.5, -2.0, 2.5)
)
msig_results <- perform_mSig_analysis(results_df, "Treatment vs Control")

# Using parallel processing
msig_results <- perform_mSig_analysis(
  results_df, 
  "Treatment vs Control",
  n_cores = 4  # Use 4 CPU cores
)

# Memory-efficient mode for large datasets
msig_results <- perform_mSig_analysis(
  results_df, 
  "Treatment vs Control",
  memory_efficient = TRUE,
  chunk_size = 50,  # Process 50 pathways at a time
  n_cores = 4       # Use parallel processing
)

# Customizing analysis parameters
msig_results <- perform_mSig_analysis(
  results_df, 
  "Treatment vs Control",
  p_cutoff = 0.01,           # More stringent p-value cutoff
  category = "C2",           # Use C2 (curated) gene sets
  min_size = 10,             # Include smaller gene sets
  max_size = 1000,           # Include larger gene sets
  nPermSimple = 2000,        # More permutations
  memory_efficient = TRUE,    # Use memory-efficient mode
  n_cores = 4                # Use parallel processing
)

}
